knn_pred <- knn(train = train_HR_df[,-15], test = test_HR_df[,-15], cl = train_labels, k = 67)
summary(knn_pred)
train_HR_df$Attrition <- as.numeric(train_HR_df$Attrition)
library(class)
train_labels <- train_HR_df$Attrition
test_labels <- test_HR_df$Attrition
knn_pred <- knn(train = train_HR_df[,-15], test = test_HR_df[,-15], cl = train_labels, k = 67)
summary(knn_pred)
require(dplyr)
require(ggplot2)
confusionMatrix( pred_attrition,test_HR_df$Attrition, positive = '1')
load("F:/Assignments/HR Analytics/.RData")
sort(vif(log_model_10))
require(dplyr)
require(ggplot2)
require(car)
sort(vif(log_model_10))
summary(log_model_10)
log_model_11 <- glm(formula = Attrition ~ EnvironmentSatisfaction1 + JobSatisfaction1 +
Age + `BusinessTravelNON-TRAVEL` + BusinessTravelTRAVEL_FREQUENTLY +
Education2 + `EducationFieldHUMAN RESOURCES` + JobLevel2 +
`JobRoleMANUFACTURING DIRECTOR` + `JobRoleRESEARCH DIRECTOR` +
`JobRoleRESEARCH SCIENTIST` + `JobRoleSALES EXECUTIVE` +
MaritalStatusDIVORCED + MaritalStatusMARRIED + NumCompaniesWorked +
StockOptionLevel0 + StockOptionLevel2 + TotalWorkingYears +
TrainingTimesLastYear + YearsSinceLastPromotion + YearsWithCurrManager +
JobInvolvement3 + overtime_count + undertime_count,
family = "binomial", data = train_HR_df[, -1])
sort(vif(log_model_11))
summary(log_model_11)
pred_attrition <- predict(log_model_11 , newdata = test_HR_df[,-1] , type = 'response')
summary(pred_attrition)
pred_attrition <- as.factor(ifelse(pred_attrition > 0.16,1,0))
require(caret)
test_HR_df$Attrition <- as.factor(test_HR_df$Attrition)
confusionMatrix( pred_attrition,test_HR_df$Attrition, positive = '1')
require(caTools)
set.seed(10000)
i <- sample.split(combined_employee_details$Attrition, SplitRatio = 0.75)
train_hr <- avl[i, ]
train_hr <- combined_employee_details[i, ]
test_hr <- combined_employee_details[!i, ]
require(e1071)
install.packages("caTools")
require(caTools)
set.seed(10000)
i <- sample.split(combined_employee_details$Attrition, SplitRatio = 0.75)
train_hr <- combined_employee_details[i, ]
test_hr <- combined_employee_details[!i, ]
require(e1071)
nb_model <- naiveBayes(Attrition ~. , data = train_hr)
summary(nb_model)
pred_test_hr <- predict(nb_model, newdata = test_hr)
require(caret)
test_hr$Attrition <- as.factor(test_hr$Attrition)
confusionMatrix( pred_test_hr,test_hr$Attrition, positive = '1')
load("F:/Assignments/HR Analytics/.RData")
require(caTools)
install.packages("caTools")
install.packages("e1071")
require(caTools)
set.seed(1005)
i <- sample.split(combined_employee_details$Attrition, SplitRatio = 0.75)
train_hr <- combined_employee_details[i, ]
test_hr <- combined_employee_details[!i, ]
require(e1071)
nb_model <- naiveBayes(Attrition ~. , data = train_hr)
summary(nb_model)
pred_test_hr <- predict(nb_model, newdata = test_hr)
require(caret)
summary(pred_test_hr)
table(pred_test_hr)
pred_test_hr
load("F:/Assignments/HR Analytics/.RData")
ggplot(combined_employee_details , aes( x = Age , fill = as.factor(Attrition))) + geom_bar() +
theme_bw() + labs(title = "Age effect on Attrition")
require(ggplot2)
ggplot(combined_employee_details , aes( x = Age , fill = as.factor(Attrition))) + geom_bar() +
theme_bw() + labs(title = "Age effect on Attrition")
View(general_data)
ggplot(general_data , aes( x = Age , fill = as.factor(Attrition))) + geom_bar() +
theme_bw() + labs(title = "Age effect on Attrition")
ggplot(combined_employee_details , aes( x = DistanceFromHome , fill = as.factor(Attrition))) + geom_bar() +
theme_bw() + labs(title = "DISTANCE FROM HOME on Attrition")
ggplot(combined_employee_details , aes( x = Education , y= EducationField, fill = as.factor(Attrition))) + geom_col()+
theme_bw() + labs(title = " education wise Attrition")
ggplot(general_data , aes( x = Education , y= EducationField, fill = as.factor(Attrition))) + geom_col()+
theme_bw() + labs(title = " education wise Attrition")
require(caTools)
set.seed(9928)
index_svm <- sample.split(combined_employee_details$Attrition , SplitRatio = 0.70)
train_svm <- combined_employee_details[index_svm, ]
test_svm <- combined_employee_details[!index_svm, ]
x = train_svm[,-c(1,6)]
x = train_svm[,-c(1,6)]
y = train_svm[,c(1,6)]
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y=train_svm[,6],
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
require(e1071)
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y=train_svm[,6],
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y= y,
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
y
x
y = train_svm[,6]
y
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y= y,
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y= train_svm[,6],
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
svm_lnr = svm(Attrition ~ ., train_svm[,-1], kernel = 'linear', scale = F)
pred_lnr = predict(svm_lnr, test_svm$Attrition)
pred_lnr = predict(svm_lnr, test_svm[,-1])
require(caret)
confusionMatrix(pred_lnr, test_svm$Attrition)
summary(pred_lnr)
pred_lnr
require(caTools)
set.seed(9928)
index_svm <- sample.split(combined_employee_details$Attrition , SplitRatio = 0.70)
train_svm <- combined_employee_details[index_svm, ]
test_svm <- combined_employee_details[!index_svm, ]
prop.table(table(combined_employee_details$Attrition))*100
prop.table(table(train_svm$Attrition))*100
prop.table(table(test_svm$Attrition))*100
install.packages("kernlab")
require(kernlab)
svm_lnr = svm(Attrition ~ ., train_svm[,-1], kernel = 'linear', scale = F)
pred_lnr = predict(svm_lnr, test_svm[,-1])
pred_lnr
require(caret)
confusionMatrix(pred_lnr, test_svm$Attrition)
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y= train_svm[,6],
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
master_HR_dummy$Attrition <- as.factor(master_HR_dummy)
require(caTools)
set.seed(99211)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
prop.table(table(master_HR_dummy$Attrition))*100
prop.table(table(train_svm$Attrition))*100
prop.table(table(test_svm$Attrition))*100
x = train_svm[,-c(1,6)]
y = train_svm[,6]
require(e1071)
svm_tune <- tune(svm,train.x=train_svm[,-c(1,6)], train.y= train_svm[,6],
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
tuned_params <- summary(svm_tune)
tuned_params$best.parameters #cost = 1, gamma 0.25
svm_model_linear <- svm(Attrition~ ., data = train_svm[,-1], kernel = "linear", scale = F, probability = TRUE,
cost = 10 ,gamma = 0.25)
pred_linear <- predict(svm_model_linear, newdata = test_svm[,-1], probability = TRUE)
prob_linear <- attr(pred_linear,"probabilities")
summary(prob_linear)
View(prob_linear)
svm_model_linear <- svm(Attrition~ ., data = train_svm[,-1], kernel = "linear", scale = F, probability = TRUE,
cost = 1 ,gamma = 0.25)
pred_linear <- predict(svm_model_linear, newdata = test_svm[,-1], probability = TRUE)
prob_linear <- attr(pred_linear,"probabilities")
View(prob_linear)
View(pred_linear)
require(e1071)
prob_linear <- attr(pred_linear,"probabilities")
prob_linear <- attr(pred_linear,"Probabilities")
(prob_linear)
View(prob_linear)
summary(pred_linear)
svm_model_linear <- svm(Attrition~ ., data = train_svm[,-1], kernel = "linear", scale = F, probability = TRUE,
cost = 10 ,gamma = 0.25)
pred_linear <- predict(svm_model_linear, newdata = test_svm[,-1], probability = TRUE)
summary(pred_linear)
summary(pred_linear)
linear_set <- as.factor(ifelse(pred_linear > 0.10, "1", "0"))
require(caret)
confusionMatrix(linear_set, test_svm$Attrition, positive = "1")
llinear_set
linear_set
linear_set <- data.frame(as.factor(ifelse(pred_linear > 0.10, "1", "0")))
require(caret)
confusionMatrix(linear_set, test_svm$Attrition, positive = "1")
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = F,
probability = T, cost = 1, gamma = 0.25)
pred_radial <- predict(svm_model_radial, newdata = test_svm[,-1], probability = TRUE)
prob_radial <- attr(pred_radial,"probabilities")
summary(prob_radial)
summary(pred_radial)
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.25, "1", "0"))
confusionMatrix(radial_set, test_svm$Attrition, positive = "1")
svm_model_polynomial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "polynomial", scale = F,
probability = T, cost = 1, gamma = 0.25)
prob_polynomial <- attr(pred_polynomial,"probabilities")
pred_polynomial <- predict(svm_model_ploynomial, newdata = test_svm[,-1], probability = TRUE)
pred_polynomial <- predict(svm_model_polynomial, newdata = test_svm[,-1], probability = TRUE)
summary(pred_polynomial)
df_roc <- bind_cols(pred_attrition,test_HR_df$Attrition)
require(dplyr)
df_roc <- bind_cols(pred_attrition,test_HR_df$Attrition)
pred_attrition <- as.data.frame(pred_attrition)
View(pred_attrition)
pred_attrition_1 <- predict(log_model_11 , newdata = test_HR_df[,-1] , type = 'response')
log_model_11 <- glm(formula = Attrition ~ EnvironmentSatisfaction1 + JobSatisfaction1 +
Age + `BusinessTravelNON-TRAVEL` + BusinessTravelTRAVEL_FREQUENTLY +
Education2 + `EducationFieldHUMAN RESOURCES` + JobLevel2 +
`JobRoleMANUFACTURING DIRECTOR` + `JobRoleRESEARCH DIRECTOR` +
`JobRoleRESEARCH SCIENTIST` + `JobRoleSALES EXECUTIVE` +
MaritalStatusDIVORCED + MaritalStatusMARRIED + NumCompaniesWorked +
StockOptionLevel0 + StockOptionLevel2 + TotalWorkingYears +
TrainingTimesLastYear + YearsSinceLastPromotion + YearsWithCurrManager +
JobInvolvement3 + overtime_count + undertime_count,
family = "binomial", data = train_HR_df[, -1])
pred_attrition_1 <- predict(log_model_11 , newdata = test_HR_df[,-1] , type = 'response')
pred_attrition_1 <- as.data.frame(pred_attrition_1)
df_roc <- bind_cols(pred_attrition,test_HR_df$Attrition)
Attrition <- as.data.frame(test_HR_df$Attrition)
df_roc <- bind_cols(pred_attrition,Attrition)
df_roc <- bind_cols(pred_attrition_1,Attrition)
View(df_roc)
df_roc <- arrange(df_roc, desc(pred_attrition_1))
install.packages("ROCR")
colnames(df_roc)[1] <- "Attrition"
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, lables = df_roc$Attrition)
require(ROCR)
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, lables = df_roc$Attrition)
Pred_roc <- prediction(df_roc$pred_attrition_1,df_roc$Attrition)
df_roc$Attrition <- ifelse(df_roc$Attrition == 0 , 'NO','YES')
pred_attrition_1 <- as.data.frame(pred_attrition_1)
Attrition <- as.data.frame(test_HR_df$Attrition)
df_roc <- bind_cols(pred_attrition_1,Attrition)
df_roc <- arrange(df_roc, desc(pred_attrition_1))
colnames(df_roc)[2] <- "Attrition"
require(ROCR)
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, lables = df_roc$Attrition)
df_roc$Attrition <- ifelse(df_roc$Attrition == 0 , 'NO','YES')
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, lables = df_roc$Attrition)
require(ROCR)
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, lables = df_roc$Attrition)
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, labels = df_roc$Attrition)
perf <- performance(Pred_roc ,"tpr", "fpr")
plot(perf, colorsize = TRUE)
pred_attrition <- as.factor(ifelse(pred_attrition_1 > 0.20,1,0))
require(caret)
confusionMatrix(pred_attrition,test_HR_df$Attrition, positive = '1')
pred_attrition <- as.factor(ifelse(pred_attrition_1 > 0.18,1,0))
require(caret)
confusionMatrix(pred_attrition,test_HR_df$Attrition, positive = '1')
outlier <- function(vector){
Q <- as.numeric(quantile(vect))
min <- Q[1]
Q1 <- Q[2]
Q2 <- Q[3]
Q3 <- Q[4]
max <-Q[5]
IQR <- Q3-Q1
LO <- Q1-1.5*IQR
UO <- Q3+1.5*IQR
for(i in 1:length(vect)){
if (vect[i]>UO) {
vect[i]=UO
}else{
if(vect[i] < LO){
vect[i]=LO
}else{
vect[i]
}
}
}
return(vect)
}
quantile(combined_employee_details$TotalWorkingYears, seq(0, 1, 0.01), na.rm = T)
quantile(general_data$TotalWorkingYears, seq(0, 1, 0.01), na.rm = T)
general_data$TotalWorkingYears <- outlier(general_data$TotalWorkingYears)
outlier <- function(vect){
Q <- as.numeric(quantile(vect))
min <- Q[1]
Q1 <- Q[2]
Q2 <- Q[3]
Q3 <- Q[4]
max <-Q[5]
IQR <- Q3-Q1
LO <- Q1-1.5*IQR
UO <- Q3+1.5*IQR
for(i in 1:length(vect)){
if (vect[i]>UO) {
vect[i]=UO
}else{
if(vect[i] < LO){
vect[i]=LO
}else{
vect[i]
}
}
}
return(vect)
}
general_data$TotalWorkingYears <- outlier(general_data$TotalWorkingYears)
general_data$YearsAtCompany <- outlier(general_data$YearsAtCompany)
quantile(general_data$YearsAtCompany, seq(0, 1, 0.01), na.rm = T)
plot(quantile(combined_employee_details$YearsAtCompany, seq(0, 1, 0.01), na.rm = T))
quantile(combined_employee_details$YearsAtCompany, seq(0, 1, 0.01), na.rm = T)
require(DMwR)
df <- unscale(combined_employee_details,combined_employee_details$YearsAtCompany)
df <- as.data.frame(unscale(combined_employee_details,combined_employee_details$YearsAtCompany))
quantile(general_data$YearsAtCompany, seq(0, 1, 0.01), na.rm = T)
quantile(general_data$YearsWithCurrManager, seq(0, 1, 0.01), na.rm = T)
general_data$YearsWithCurrManager <- outlier(general_data$YearsWithCurrManager)
quantile(general_data$YearsWithCurrManager, seq(0, 1, 0.01), na.rm = T)
master_HR_dummy$Attrition <- as.factor(master_HR_dummy)
require(caTools)
set.seed(99211)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
svm_model_linear <- svm(Attrition~ ., data = train_svm[,-1], kernel = "linear", scale = F, probability = TRUE,
gamma = 0.25)
pred_linear <- predict(svm_model_linear, newdata = test_svm[,-1], probability = TRUE)
summary(pred_linear)
svm_model_linear <- svm(Attrition~ ., data = train_svm[,-1], kernel = "linear", scale = F, probability = TRUE)
pred_linear <- predict(svm_model_linear, newdata = test_svm[,-1], probability = TRUE)
summary(pred_linear)
prob_linear <- attr(pred_linear,"probabilities")
View(prob_linear)
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = F,
probability = T)
pred_attrition_1 <- as.data.frame(pred_attrition_1)
Attrition <- as.data.frame(test_HR_df$Attrition)
df_roc <- bind_cols(pred_attrition_1,Attrition)
df_roc <- arrange(df_roc, desc(pred_attrition_1))
colnames(df_roc)[2] <- "Attrition"
require(ROCR)
Pred_roc <- prediction(predictions = df_roc$pred_attrition_1, labels = df_roc$Attrition)
perf <- performance(Pred_roc ,"tpr", "fpr")
plot(perf, colorsize = TRUE)
master_HR_dummy$Attrition <- ifelse(master_HR_dummy$Attrition == 1, 'YES','NO')
master_HR_dummy$Attrition <- as.factor(master_HR_dummy$Attrition)
require(caTools)
set.seed(99219)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
require(e1071)
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = F,
probability = T)
pred_radial <- predict(svm_model_radial, newdata = test_svm[,-1], probability = TRUE)
summary(pred_radial)
prob_radial <- attr(pred_radial,"probabilities")
summary(prob_radial)
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.18, "1", "0"))
confusionMatrix(radial_set, test_svm$Attrition, positive = "1")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.18, "YES", "NO"))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
load("F:/Assignments/HR Analytics/.RData")
View(master_HR_dummy)
master_HR_dummy$Attrition <- as.factor(master_HR_dummy$Attrition)
require(caTools)
require(caTools)
set.seed(992)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
require(e1071)
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = F,
probability = TRUE)
pred_radial <- predict(svm_model_radial, newdata = test_svm[,-1], probability = TRUE)
summary(pred_radial)
require(caret)
View(pred_radial)
summary(pred_radial)
load("F:/Assignments/HR Analytics/.RData")
class(master_HR_dummy$Attrition)
require(caTools)
set.seed(9920)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
require(e1071)
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = FALSE,
probability = TRUE)
pred_radial <- predict(svm_model_radial, newdata = test_svm[,-1], probability = TRUE)
summary(pred_radial)
View(pred_radial)
radial_set <- as.factor(ifelse(pred_radial > 0.10,1,0))
require(caret)
confusionMatrix(radial_set, test_svm$Attrition, positive = "1")
radial_set
View(master_HR_dummy)
test_svm$Attrition <- as.factor(test_svm$Attrition)
confusionMatrix(radial_set, test_svm$Attrition, positive = "1")
radial_set <- as.factor(ifelse(pred_radial > 0.18,1,0))
test_svm$Attrition <- as.factor(test_svm$Attrition)
confusionMatrix(radial_set, test_svm$Attrition, positive = "1")
radial_set <- as.factor(ifelse(pred_radial > 0.17,1,0))
test_svm$Attrition <- as.factor(test_svm$Attrition)
confusionMatrix(radial_set, test_svm$Attrition, positive = "1")
load("F:/Assignments/HR Analytics/.RData")
master_HR_dummy$Attrition <- as.factor(ifelse(master_HR_dummy$Attrition == 1,'YES','NO'))
require(caTools)
set.seed(993)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
require(e1071)
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = FALSE,
probability = TRUE)
pred_radial <- predict(svm_model_radial, newdata = test_svm[,-1], probability = TRUE)
summary(pred_radial)
prob_radial <- attr(pred_radial,"probabilities")
summary(prob_radial)
View(prob_radial)
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.17,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
require(caret)
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.18,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.16,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
require(dummies)
master_HR_dummy <- dummy.data.frame(combined_employee_details)
master_HR_dummy$Attrition <- as.factor(master_HR_dummy$Attrition)
require(caTools)
set.seed(37)
index <- sample.split(master_HR_dummy$Attrition , SplitRatio = 0.75)
train_HR_df <- master_HR_dummy[index , ]
test_HR_df <- master_HR_dummy[!index , ]
prop.table(table(master_HR_dummy$Attrition)) * 100
prop.table(table(train_HR_df$Attrition)) * 100
prop.table(table(test_HR_df$Attrition)) * 100
log_model_1 <- glm(Attrition ~ . , data = train_HR_df[ , -1], family = "binomial")
summary(log_model_1) # AIC
log_model_2 <- step( log_model_1, direction = "both")
require(car)
sort(vif(log_model_2))
log_model_1 <- glm(Attrition ~ . , data = train_HR_df[ , -1], family = "binomial")
log_model_11 <- glm(formula = Attrition ~ EnvironmentSatisfaction1 + JobSatisfaction1 +
Age + `BusinessTravelNON-TRAVEL` + BusinessTravelTRAVEL_FREQUENTLY +
Education2 + `EducationFieldHUMAN RESOURCES` + JobLevel2 +
`JobRoleMANUFACTURING DIRECTOR` + `JobRoleRESEARCH DIRECTOR` +
`JobRoleRESEARCH SCIENTIST` + `JobRoleSALES EXECUTIVE` +
MaritalStatusDIVORCED + MaritalStatusMARRIED + NumCompaniesWorked +
StockOptionLevel0 + StockOptionLevel2 + TotalWorkingYears +
TrainingTimesLastYear + YearsSinceLastPromotion + YearsWithCurrManager +
JobInvolvement3 + overtime_count + undertime_count,
family = "binomial", data = train_HR_df[, -1])
pred_attrition_1 <- predict(log_model_11 , newdata = test_HR_df[,-1] , type = 'response')
summary(pred_attrition_1)
confusionMatrix( pred_attrition,test_HR_df$Attrition, positive = '1')
class(master_HR_dummy$Attrition)
master_HR_dummy$Attrition <- as.factor(ifelse(master_HR_dummy$Attrition == 1,'YES','NO'))
require(caTools)
set.seed(993)
index_svm <- sample.split( master_HR_dummy$Attrition , SplitRatio = 0.70)
train_svm <- master_HR_dummy[index_svm, ]
test_svm <- master_HR_dummy[!index_svm, ]
x = train_svm[,-c(1,15)]
y = train_svm[,15]
require(e1071)
svm_tune <- tune(svm,train.x=train_svm[,-c(1,15)], train.y= train_svm[,15],
ranges=list(cost=10^(-2:2),gamma=2^(-2:2)))
tuned_params <- summary(svm_tune)
tuned_params$best.parameters #cost = 1, gamma 0.25
svm_model_linear <- svm(Attrition~ ., data = train_svm[,-1], kernel = "linear", scale = F, probability = TRUE,
cost = 1, gamma = 0.25)
pred_linear <- predict(svm_model_linear, newdata = test_svm[,-1], probability = TRUE)
summary(pred_linear)
prob_linear <- attr(pred_linear,"probabilities")
View(prob_linear)
linear_set <- as.factor(ifelse(prob_linear[,1] > 0.10, "YES", "NO"))
summary(prob_linear)
linear_set <- as.factor(ifelse(prob_linear[,1] > 0.15, "YES", "NO"))
require(caret)
confusionMatrix(linear_set,test_svm$Attrition, positive = "YES")
svm_model_radial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "radial", scale = FALSE,
probability = TRUE,cost = 1, gamma = 0.25)
pred_radial <- predict(svm_model_radial, newdata = test_svm[,-1], probability = TRUE)
summary(pred_radial)
prob_radial <- attr(pred_radial,"probabilities")
summary(prob_radial)
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.16,'YES','NO'))
summary(prob_radial)
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.17,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.18,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.20,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
radial_set <- as.factor(ifelse(prob_radial[,1] > 0.163,'YES','NO'))
confusionMatrix(radial_set, test_svm$Attrition, positive = "YES")
svm_model_polynomial <- svm(Attrition ~ .,data = train_svm[,-1], kernel = "polynomial", scale = F,
probability = T, cost = 1, gamma = 0.25)
pred_polynomial <- predict(svm_model_polynomial, newdata = test_svm[,-1], probability = TRUE)
prob_polynomial <- attr(pred_polynomial,"probabilities")
summary(pred_polynomial)
summary(prob_polynomial)
polynomial_set <- as.factor(ifelse(prob_polynomial[,1] > 0.165, "YES", "NO"))
confusionMatrix(polynomial_set, test_svm$Attrition, positive = "YES")
general_data <- read.csv("F:/Assignments/HR Analytics/general_data.csv", header=FALSE)
View(general_data)
general_data <- read.csv("general_data.csv" , stringsAsFactors = F)
setwd("F:/Assignments/HR Analytics")
general_data <- mutate_if(general_data, general_data[,c(5,6)], as.factor)
require(dplyr)
general_data <- mutate_if(general_data, general_data[,c(5,6)], as.factor)
general_data <- mutate_if(general_data, general_data[,5], as.factor)
general_data[,c(2,4,7,9)] <-as.factor(general_data[,c(2,4,7,9)])
glimpse(general_data)
View(general_data)
general_data <- read.csv("general_data.csv" , stringsAsFactors = F)
general_data[,c(2,4,7,9)] <-as.factor(general_data[,c(2,4,7,9)])
glimpse(general_data)
